plugins {
    id 'com.android.application'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    namespace 'br.com.tiagohs.popmovies'
    flavorDimensions "default"

    signingConfigs {
        config {
            keyAlias 'PopMovies-Key'
            keyPassword '14789632'
            storeFile file('../keystore/keystore.jks')
            storePassword '14789632'
        }
    }

    compileSdk globalConfiguration["sdkVersion"]

    defaultConfig {
        applicationId "br.com.tiagohs.popmovies"
        minSdk globalConfiguration["minSDK"]
        targetSdk globalConfiguration["sdkVersion"]
        versionCode globalConfiguration["versionCode"]
        versionName globalConfiguration["versionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false

            signingConfig signingConfigs.config
        }

        release {
            minifyEnabled true
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.config
        }
    }

    productFlavors {
        develop {
            dimension "default"
        }

        prd {
            dimension "default"
        }
    }

    variantFilter { variant ->
        if (variant.buildType.name == 'release') {
            def flavorNames = variant.flavors*.name

            if (flavorNames.contains("develop")) {
                setIgnore(true)
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion globalConfiguration["kotlinCompilerExtension_version"]
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    def dependencies = rootProject.ext.dependencies
    def modules = rootProject.ext.modules
    def composeBom = platform(dependencies.composeBom)

    //******* Modules *********//

    implementation project(path: modules.features)
    implementation project(path: modules.signin)
    implementation project(path: modules.signup)
    implementation project(path: modules.home)
    implementation project(path: modules.core)
    implementation project(path: modules.components)
    implementation project(path: modules.database)
    implementation project(path: modules.helpers)
    implementation project(path: modules.navigation)
    implementation project(path: modules.network)
    implementation project(path: modules.theme)
    implementation project(path: modules.data)
    implementation project(path: modules.dataMovies)
    implementation project(path: modules.dataAuth)

    //************************//

    implementation dependencies.coreKtx
    implementation dependencies.appcompat
    implementation dependencies.lifecycleRuntimeKtx

    //******* Compose *********//

    implementation composeBom
    implementation dependencies.composeMaterialDesign
    implementation dependencies.composeUiToolingPreview
    implementation dependencies.composeActivity
    implementation dependencies.composeLifecycleViewModel
    implementation dependencies.composeNavigation

    //************************//

    //******* Firebase *********//

//    implementation platform(dependencies.firebaseBom)
//    implementation dependencies.firebaseCrashlytics
//    implementation dependencies.firebaseanalytics

    //************************//

    //******* Koin *********//

    implementation dependencies.koinAndroid
    implementation dependencies.koinCompose

    //************************//

    //******* Firebase *********//

    implementation platform(dependencies.firebaseBom)
    implementation dependencies.firebaseCrashlytics
    implementation dependencies.firebaseAnalytics

    //************************//

    testImplementation dependencies.junit

    debugImplementation dependencies.uiTestManifest
    debugImplementation dependencies.uiTooling

    androidTestImplementation composeBom
    androidTestImplementation dependencies.testJunit4
    androidTestImplementation dependencies.extJunit
    androidTestImplementation dependencies.espressoCore
}